<!doctype html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>ESN message board</title>
    <style>
      body { 
        margin: 0; 
        padding-bottom: 3rem; 
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; 
      }

      header {
        background-color: rgb(168,196,244);
        padding: 5px;
        display: flex;
        justify-content: space-between;
        height: 3rem;
        font-weight: bold;
        font-size: large;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
      }

      button {
        padding: 5px 10px;
        font-size: 13px;
        margin: 2px;
        cursor: pointer;
        border: solid black;
        border-radius: 5px;
        width: 100px; /* Set a fixed width for both buttons */
        background-color: rgb(245, 155, 95);
        font-weight: bold;
      }

      #messageForm { 
        background: rgb(168,196,244); 
        padding: 0.25rem; 
        position: fixed; 
        bottom: 0; 
        left: 0; 
        right: 0; 
        display: flex; 
        height: 3rem; 
        box-sizing: border-box; 
        backdrop-filter: blur(10px); 
      }

      input { 
        border: none; 
        padding: 0 1rem; 
        flex-grow: 1; 
        border-radius: 2rem; 
        margin: 0.25rem; 
        width: 10px;
      }

      #messages {
        list-style: none;
        margin-top: 4rem;
        margin-right: 3.5rem;
      }

      .message {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
      }

      .message strong {
        font-weight: bold;
      }

      .message .timestamp {
        float: right;
        color: #888;
      }

      footer {
        background-color: rgb(168,196,244);
        padding: 10px;
        position: sticky;
        bottom: 0;
        text-align: center;
      }

    </style>
  </head>
  <body>

    <header>
      <p>FSE Chat Room<p>
      <button id="toggle-btn">Logout</button>
    </header>


    <!-- Message area -->
    <div id="messageBox" style="display: block">
      <!-- unordered list of display messages -->
      <ul id="messages"></ul>
      <form id="messageForm" action="">
        <input id="textInput" autocomplete="off" placeholder="Type your message..."/>
        <button>Post</button>
        
      </form>
    </div>
    

    <!-- Socket.io cdn & scripts -->
    <script src="https://cdn.socket.io/4.7.3/socket.io.min.js"></script>
    <script>
      const socket =  io("http://localhost:3000")
      window.onload = async () => {
        
        try {
          
          const response = await fetch('/users/info');

          if (response.ok) {
            const user = await response.json();
            const username = user.username;

            //const socket = io();
            
            const message = document.getElementById('messages');
            const messageForm = document.getElementById('messageForm');
            const textInput = document.getElementById('textInput');
            const toggleButton = document.getElementById('toggle-btn');

            //const messageInit = await fetch('/messages/initialization');

            // Listen for initial messages from the server
            socket.on('initMessages', (data) => {
              if (!data.empty){
                for(var msg of data.archive){
                  const item = document.createElement('li');
                  item.className = 'message';
                  // Change username to 'me' when user matches+
                  if (msg.username == username) {
                    item.innerHTML = `<strong>Me</strong><span class="timestamp">${msg.timestamp}</span><p>${msg.content}</p>`;
                  } else {
                    item.innerHTML = `<strong>${msg.username}</strong><span class="timestamp">${msg.timestamp}</span><p>${msg.content}</p>`;
                  }
                  messages.appendChild(item);

                }
               
              }
                
            });

            // client -> server (message)
            messageForm.addEventListener('submit', (e) => {
              e.preventDefault();
              if (textInput.value) {
                const messageobj = {
                  username: username,
                  content: textInput.value,

                }
                //socket.emit('chat message', textInput.value, username, (new Date()).toLocaleTimeString());
                // socket.emit('chat message', messageobj)
                fetch('http://localhost:3000/message',{
                  method:"POST",
                  body:JSON.stringify({
                    username: username,
                    content: textInput.value
                  }),
                  headers: {
                "Content-type": "application/json; charset=UTF-8"
                  }
                }
                )
                textInput.value = '';
              }
            });

            toggleButton.addEventListener('click', (e) => {
              e.preventDefault();
              if (socket.connected) {
                  socket.disconnect();
                  window.location.replace('/');
              } 
              });

              socket.on('chat message', (msg) => {
                  const item = document.createElement('li');
                  item.className = 'message';
                  if ( username== msg.username) {
                    item.innerHTML = `<strong>Me</strong><span class="timestamp">${msg.timestamp}</span><p>${msg.content}</p>`;
                  } else {
                    item.innerHTML = `<strong>${msg.username}</strong><span class="timestamp">${msg.timestamp}</span><p>${msg.content}</p>`;
                  }
                  messages.appendChild(item);
                  window.scrollTo(0, document.body.scrollHeight);
              });
          }
        } catch (err) {

          alert(`Failed to load chatroom for user ${err?.message || 'Unknown error.'}`);
          window.location.href = '/';

        }
      }
      </script>
  </body>
</html>